#!/bin/bash
set -e

SYSCTL_VAR=kernel.deny_new_usb
DEVICES=

usage() {
	echo "Usage: $(basename "$0") [COMMAND]"
	echo "Control usb device and protection settings."
	echo
	echo "COMMANDS:"
	echo "  protect, disable, off -- disallow new usb devices (protected)"
	echo "  unprotect, enable, on -- allow new usb devices (unprotected)"
	echo "  temporary             -- temporarily disable protection (default 10 sec)"
	echo "  check                 -- exit with 1 if usb is unprotected"
	echo "  status                -- print current protection status"
	echo "  list, ls              -- list currently connected usb devices"
	echo "  log                   -- display usb events in the kernel ring buffer"
}

deny_new_usb() {
	sudo sysctl -q "${SYSCTL_VAR}=${1}"
	usb_status
}

usb_protected() {
	sysctl -n "${SYSCTL_VAR}"|grep -q 1
}

usb_status() {
	if usb_protected; then
		printf '\e[32;1m'
	else
		printf '\e[31;1mUN'
	fi
	printf 'PROTECTED\e[0m\n'
}

usb_list() {
	lsusb -t
}

temporary() {
	DEVICES=$(usb_list)
	deny_new_usb 0
	trap temporary_end INT TERM
	sleep 10
	temporary_end
}

temporary_end() {
	deny_new_usb 1
	NEW_DEVICES=$(usb_list)
	diff --color <(printf "%s" "${DEVICES}") <(printf "%s" "${NEW_DEVICES}")
	exit
}

usb_log() {
	DMESG=dmesg
	if sysctl -n kernel.dmesg_restrict | grep -q 1; then
		DMESG="sudo ${DMESG}"
	fi
	${DMESG} --color="${USBCTL_LOG_COLOR:-always}" --ctime|grep -i usb --color="${USBCTL_GREP_COLOR:-never}"
}

case "$1" in
	on|enable|unprotect)
		deny_new_usb 0
		;;
	off|disable|protect)
		deny_new_usb 1
		;;
	temporary|tmp|temp)
		temporary
		;;
    check)
        usb_protected
        ;;
	status)
		usb_status
		;;
	list|ls)
		usb_list
		;;
	log)
		usb_log
		;;
	*)
		usage
		;;
esac
